#!/usr/bin/env bash

MINMAPQ=10;

# parsing arguments
while getopts ":ho:g:x:q:" opt; do
  case ${opt} in
    h )
      echo "Usage: process_celseq_reads [options] -o <outprefix> -g <gtf_file> -x <hisat2_index> <fastqfile> "
      echo "    -h         Print this help message."
      echo "    -o         Outprefix including the path for the output. Required."
      echo "    -g         GTF file. Required."
      echo "    -x         HISAT2 index. Required."
      echo "    -q         Minimum mapping quality to retain read. Default: 10."
      echo "    fastqfile  FASTQ file with raw reads. Required."
      exit 0
      ;;
    o )
      OUTPREFIX="$OPTARG"
      output_provided=true
      ;;
    g )
      GTFFN="$OPTARG"
      gtf_provided=true
      ;;
    x )
      HISAT2_INDEX="$OPTARG"
      index_provided=true
      ;;
    q )
      MINMAPQ="$OPTARG"
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      exit 1
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

FASTQFILE="${1?Error: no FASTQ file provided.}"
if [ ! -f $FASTQFILE ]; then
    echo "Error: ${FASTQFILE} does not exist" 1>&2
    abort_status=true
fi;

if [ ! $index_provided ]; then
  echo "Error: No hisat2 index provided, -x argument is required." 1>&2
  abort_status=true
else
  for f in ${HISAT2_INDEX}*.ht*; do
      if [ ! -e "$f" ]; then
        echo "Error: Provided hisat2 index does not exist."
        abort_status=true
      fi;
      break
  done
fi

if [ ! $gtf_provided ]; then
  echo "Error: No GTF file provided, -g argument is required." 1>&2
  abort_status=true
elif [ ! -f $GTFFN ]; then
  echo "Error: Provided GTF file does not exist."
  abort_status=true
fi

if [ ! $output_provided ]; then
  echo "Error: No outprefix provided, -o argument is required." 1>&2
  abort_status=true
fi

if [ $abort_status ]; then
  exit 1
fi

## generate output path if not existing
OUTDIR=$(echo "$OUTPREFIX" | grep -o ".*/");
if [ ! -d $OUTDIR ]; then
  mkdir -p $OUTDIR;
fi;

## aligning DamID reads
echo "Aligning reads to genome."
BAMFN="${OUTPREFIX}.bam"

hisat2 \
  --seed 42 \
  -x "$HISAT2_INDEX" \
  -U "$FASTQFILE" \
  --mp '2,0' \
  --sp '4,0' \
  > "$BAMFN"

## process aligned reads and count MOTIF occurrences
echo "Counting unique transcripts."
COUNTFN="${OUTPREFIX}.counts.hdf5";

generate_celseq_counts.py \
  -vvv \
  --gtf "$GTFFN" \
  --mode intersection-strict \
  --min-mapq $MINMAPQ \
  --outfile "$COUNTFN" \
  --save-stats \
  "$BAMFN"
